=begin pod

=head1 NAME

has-word - A quick non-regex word-boundary checker

=head1 SYNOPSIS

=begin code :lang<raku>

use has-word;

say has-word("foobarbaz", "foo");                   # False
say has-word("foo barbaz", "foo");                  # True
say has-word("foo::bar::baz", "bar");               # True
say has-word("foo::bar::baz", "BAZ", :ignorecase);  # True
say has-word("foo::bar::báz", "baz", :ignoremark);  # True

.say for all-words("foo bar FOO", "foo", :i);       # foo␤FOO␤

.say for find-all-words("foo bar foo", "foo");      # 0␤8␤

=end code

=head1 DESCRIPTION

The C<has-word> module exports a two subroutines that provide
a quick way to see whether a string occurs as a "word" (defined as a number of
alphanumeric characters surrounded by either non-alphanumeric characters or
the beginning or end of the string.  As such, it provides the equivalent of
the C<<< word >>> functionality in regular expressions, but much faster and
with a simpler way of checking for words that cannot be determined at compile
time.

=head1 SUBROUTINES

=head2 has-word

=begin code :lang<raku>

say has-word("foobarbaz", "foo");                   # False
say has-word("foo barbaz", "foo");                  # True
say has-word("foo::bar::baz", "bar");               # True
say has-word("foo::bar::baz", "BAZ", :ignorecase);  # True

=end code

The C<has-word> subroutine takes the haystack string as the first positional
argument, and the needle string as the second positional argument.  It also
optionally takes an C<:ignorecase> (or C<:i>) named argument to perform the
search in a case-insensitive manner, and/or an C<:ignoremark> (or C<:m>) named
argument to perform the search by only comparing the base characters.

It returns either C<True> if found, or C<False> if not.

=head2 all-words

=begin code :lang<raku>

.say for all-words("foo bar FOO", "foo", :i);      # foo␤FOO␤

=end code

The C<all-words> subroutine takes the haystack string as the first
positional argument, and the needle string as the second positional
argument.  It also optionally takes an C<:ignorecase> (or C<:i>) named
argument to perform the search in a case-insensitive manner, and/or an
C<:ignoremark> (or C<:m>) named argument to perform the search by only
comparing base characters.  It returns a C<Slip> with the found strings
(which can be different from the given needle if C<:ignorecase> or
C<:ignoremark> were specified.

=head2 find-all-words

=begin code :lang<raku>

.say for find-all-words("foo bar foo", "foo");      # 0␤8␤

=end code

The C<find-all-words> subroutine takes the haystack string as the first
positional argument, and the needle string as the second positional
argument.  It also optionally takes an C<:ignorecase> (or C<:i>) named
argument to perform the search in a case-insensitive manner, and/or an
C<:ignoremark> (or C<:m>) named argument to perform the search by only
comparing base characters.  It returns a C<List> of positions in the
haystack string where the needle string was found.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/has-word .
Comments and Pull Requests are welcome.

If you like this module, or what I’m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2021, 2022, 2024, 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it
under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
